
include 'emu8086.inc'

data segment
    
      
    matriz1 db 9 dup(0)
    
    matriz2 db 9 dup(0)
    
    matriz3 db 9 dup(0)
     
    mensajePrincipal db 10,13,"Suma de Matrices $" 
    mensaje1 db 10,13,"Ingresa el elemento de la matriz A :$"
    mensaje2 db 10,13,"Ingrese los elemento de la matriz B :$"
    salto db 10,13, "$"
    
    
    cadena db 10,13, "valor 1 $"
    cadena1 db 10,13, "valor 2 $"
    cadena2 db 10,13, "valor 3 $"
    
    
    
    mensajeResultado db 10, 13, "El resultado de la suma de las matrices es: $"
    
    m11 db 10,13, "(1,1): $"
    m12 db 10,13, "(1,2): $"
    m13 db 10,13, "(1,3): $"
    
    m21 db 10,13, "(2,1): $"
    m22 db 10,13, "(2,2): $"
    m23 db 10,13, "(2,3): $"
    
    m31 db 10,13, "(3,1): $"
    m32 db 10,13, "(3,2): $"
    m33 db 10,13, "(3,3): $"
    
    mensajeSuma db 10, 13, "Se realizo una suma$"
    
    x db 2
    y db 3
    
    m db ?
    n db ?
    coma db 10, 13, ", $"
    
    

ends

stack segment
    dw   128  dup(0)
ends




cadenaAnumero proc 
    
    
    
   ;*********************************************************************************************
   
   
endp


numeroACadena proc 
    
    ;*************************************
    
    
    
endp
        



code segment
principal:  

    ASSUME  CS: code, DS: data, SS: stack
    mov ax, data
    mov ds, ax
    
    
    ;----------------------------CODIGO-------------------------------------
    
     
    
       
    llenar1:
    
        mov dx, offset mensajePrincipal
        call imprimir 
    
        mov dx, offset mensaje1
        call imprimir

    

        mov dx, offset m11
        call imprimir
        call SCAN_NUM ;almancena en registro cx
        
        mov ax, cx ;copia el contenido del registro al al registo dl      
        mov matriz1[0],al ;origen 8 bit, destino 16 
        
        ;****************VERIFICAR POR QUE ES AL**************
          
        
        mov dx, offset m12
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz1[1],al
        
        mov dx, offset m13
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz1[2],al  
        
        mov dx, offset m21
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz1[3],al
        
        mov dx, offset m22
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz1[4],al
        
        mov dx, offset m23
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz1[5],al
        
        mov dx, offset m31
        call imprimir
        call SCAN_NUM 
        
        mov ax, cx
        mov matriz1[6],al
        
        mov dx, offset m32
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz1[7],al
        
        mov dx, offset m33
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz1[8],al
        
        mov dx, offset salto
        call imprimir
        
        
        
        
        
       
    llenar2:
    
        ;mov dx, offset mensaje2
        ;call imprimir
    
        
        mov dx, offset m11
        call imprimir
        call SCAN_NUM ;almancena en registro cx
        
        mov ax, cx ;copia el contenido del registro al al registo dl      
        mov matriz2[0],ah ;origen 8 bit, destino 16 
        
        ;****************VERIFICAR POR QUE ES AL**************
          
        
        mov dx, offset m12
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz2[1],ah
        
        mov dx, offset m13
        call imprimir
        call SCAN_NUM
        
        
        mov ax, cx
        mov matriz2[2],ah  
        
        mov dx, offset m21
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz2[3],ah
        
        mov dx, offset m22
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz2[4],ah
        
        mov dx, offset m23
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz2[5],ah
        
        mov dx, offset m31
        call imprimir
        call SCAN_NUM 
        
        mov ax, cx
        mov matriz2[6],ah
        
        mov dx, offset m32
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz2[7],ah
        
        mov dx, offset m33
        call imprimir
        call SCAN_NUM
        
        mov ax, cx
        mov matriz2[8],ah
        
         
        mov dx, offset mensajeSuma
        call imprimir
        
        
        jmp suma 
        
        

    
    suma:
    
         mov ax, 0  
         
         
         mov al,matriz1[0] 
         add al,matriz2[0] 
         mov matriz3[0], al
         
         mov al,matriz1[1] 
         add al,matriz2[1] 
         mov matriz3[1], al
         
         mov al,matriz1[2] 
         add al,matriz2[2] 
         mov matriz3[2], al
         
         mov al,matriz1[3] 
         add al,matriz2[3] 
         mov matriz3[3], al
         
         mov al,matriz1[4] 
         add al,matriz2[4] 
         mov matriz3[4], al
         
         mov al,matriz1[5] 
         add al,matriz2[5] 
         mov matriz3[5], al 
         
         mov al,matriz1[6] 
         add al,matriz2[6] 
         mov matriz3[6], al
         
         mov al,matriz1[7] 
         add al,matriz2[7] 
         mov matriz3[7], al
         
         mov al,matriz1[8] 
         add al,matriz2[8] 
         mov matriz3[8], al
         
         
         
         
         
       
         jmp imprimirMatriz3
         
         
    imprimirMatriz3: ;usando posicionamiento de cursor
        
         call CLEAR_SCREEN
         
         
            
         mov ah, 09H
         lea dx, mensajeResultado
         int 21h
         
         
         mov ah, 02H
         mov dx, 032h
         int 10h
         
         
         mov ah, 09H
         lea dx, cadena
         int 21h
         
         
         
         
         
         
         jmp finalizar
         
         
         
       
        
        
     
            
       


            
    imprimir:
            mov ah, 09H
            int 21H
            ret ;retorna a la ejecucion de donde fue llamado
    
            
    input: 
            mov ah, 01 ;espera input del usuario
            int 21H
            ret     ;almacena en registro "al"       
    
            
    finalizar:
        mov ax, 4c00h  ;finaliza el programa
        int 21h
    
          

   
    


;-----------------------------------------------------------------------




code ends


DEFINE_CLEAR_SCREEN
DEFINE_SCAN_NUM
DEFINE_PRINT_STRING
DEFINE_PRINT_NUM
DEFINE_PRINT_NUM_UNS  ; required for print_num.
DEFINE_PTHIS

